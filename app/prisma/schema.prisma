// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  
  // shadowDatabaseUrl      = env("DATABASE_URL_SHADOW")
}

model User {
  id           Int           @id @default(autoincrement())
  address      String        @unique
  username     String        @unique
  bio          String?
  xp           Int           @default(0)
  level        UserLevel     @relation(fields: [levelNumber], references: [number])
  levelNumber  Int
  hasOnChainProfile Boolean @default(false)
  hasPondSBT Boolean @default(false)
  isAdmin      Boolean       @default(false)
  courses      UserCourse[]
  technologies Technology[]
  tests        Testinstance[]
  communityProjects CommunityProject[]
  cratedAt     DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserLevel {
  number Int    @id
  xpFrom Int
  xpTo   Int
  users  User[]
}

// Generic content type
model Content {
  id               Int               @id @default(autoincrement())
  title            String            @unique
  slug             String            @unique
  description      String
  url              String
  coverImageUrl    String?
  technologies     Technology[]
  tags             Tag[]
  contentType      ContentType       @relation(fields: [contentTypeId], references: [id])
  contentTypeId    Int
  course           Course?
  resource         Resource?
  event            Event?
  communityProject CommunityProject?
  cratedAt         DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  contents Content[]
}

model Technology {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  slug      String         @unique
  contents  Content[]
  users     User[]
  questions TestQuestion[]
}

model Course {
  id          Int            @id
  levels      Level[]
  xp          Int
  userCourses UserCourse[]
  accolades   Accolade[]
  tests       Testinstance[]
  content     Content        @relation(fields: [contentId], references: [id])
  contentId   Int            @unique
}

model TestQuestion {
  id         Int                   @id @default(autoincrement())
  code       String                @unique
  question   String
  levelId    Int
  level      Level                 @relation(fields: [levelId], references: [id])
  techId     Int
  technology Technology            @relation(fields: [techId], references: [id])
  instances  TestinstanceQuestion[]
  answers    TestAnswer[]
}

model TestAnswer {
  id                Int                   @id @default(autoincrement())
  answer            String
  correct           Boolean
  questionId        Int
  question          TestQuestion          @relation(fields: [questionId], references: [id])
  instanceQuestions TestinstanceQuestion[]
}

model Testinstance {
  id            Int                   @id @default(autoincrement())
  userId          Int
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        Int
  course          Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions       TestinstanceQuestion[]
  isExpired       Boolean               @default(false)
  isSubmitted     Boolean               @default(false)
  isPassed        Boolean               @default(false)
  isCoolDownOver  Boolean               @default(false)
  expiredOn       DateTime?
  cratedAt        DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model TestinstanceQuestion {
  id            Int          @id @default(autoincrement())
  instanceId    Int
  Instance      Testinstance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  questionId    Int
  question      TestQuestion @relation(fields: [questionId], references: [id])
  givenAnswerId Int?
  givenAnswer   TestAnswer?  @relation(fields: [givenAnswerId], references: [id])
  
  @@unique([instanceId, questionId ])
}

model Resource {
  id        Int     @id
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int     @unique
}

model UserCourse {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  course         Course    @relation(fields: [courseId], references: [id])
  courseId       Int
  roadmap        Boolean   @default(false)
  completed      Boolean   @default(false)
  completedOn    DateTime?
  lastTestOn     DateTime?
  lastTestPassed Boolean   @default(false)

  @@unique([userId, courseId])
}

model Accolade {
  id          Int      @id @default(autoincrement())
  description String
  imageUrl    String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  cratedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id        Int      @id
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  location  String
  content   Content  @relation(fields: [contentId], references: [id])
  contentId Int      @unique
}

model CommunityProject {
  id        Int      @id @default(autoincrement())
  author    String
  codeUrl   String?
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int     @unique
  submittedBy           User?      @relation(fields: [submittedById], references: [id])
  submittedById         Int?
  isApproved   Boolean @default(false)
}

model ContentType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  contents Content[]
}

model Level {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  slug      String         @unique
  courses   Course[]
  questions TestQuestion[]
}

model DaoFunction{
  id               Int            @id @default(autoincrement())
  contractAddress  String         @db.VarChar(100)
  contractFunction String         @db.VarChar(100)
  functionInputs   String[] 
  functionName     String         @db.VarChar(100)
  proposals        DaoProposal[]
}

model DaoProposal {
  id             Int                @id @default(autoincrement())
  proposer       String             @db.VarChar(100)
  targets        String[]    
  signatures     String[] 
  values         String[] 
  calldatas      String[]
  startBlock     String             @db.Text
  endBlock       String             @db.Text
  description    String
  proposalJson   String             @db.Text
  status         Int?
  proposalId     String?            @db.Text
  eta            Int?      
  params         String[]
  tx             String?            @db.VarChar(200)
  function       DaoFunction?       @relation(fields: [functionId], references: [id])
  functionId     Int?
  snapshotBlock  String?            @db.Text()
  votes          DaoProposalVote[]

  @@unique([proposalId])
}

model DaoProposalVote {
  id             Int          @id @default(autoincrement())
  voter          String       @db.VarChar(100)
  support        Int
  weigth         Int
  reason         String?      @db.VarChar(200)
  voteTx         String?      @db.VarChar(200)
  proposal       DaoProposal? @relation(fields: [proposalId], references: [proposalId])
  proposalId     String?      @db.Text  

  @@unique([proposalId, voter])
}