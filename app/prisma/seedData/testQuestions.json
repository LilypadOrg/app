[
  {
    "code": "BTC-BEG-1",
    "question": "Is the following statement true? 'In a Hierarchical Deterministic wallet it is recommended to share the master private key.'",
    "technology": "Bitcoin",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-BEG-1",
    "question": "Is the following statement true? 'The Ethereum Virtual Machine, or EVM, is part of the Bitcoin blockchain ecosystem.'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-BEG-2",
    "question": "What is the NONCE?'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "The Nonce is an integer number that together with the block number, the data, and the previous hash, serves as input to the SHA256 function to calculate the hash of the current block.",
        "correct": true
      },
      {
        "answer": "The Nonce is a decimal number that together with the block number, the data, and the previous hash, serves as input to the SHA256 function to calculate the hash of the current block."
      },
      {
        "answer": "The Nonce is an integer number that independently serves as input to the SHA256 function to calculate the hash of the current block."
      },
      {
        "answer": "The Nonce is an integer number that together with the block number, the data, and the previous hash, serves as input to the SHA512 function to calculate the hash of the current block."
      }
    ]
  },
  {
    "code": "BLK-BEG-3",
    "question": "What are the hash cryptography? characteristics?'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Unidirectional - Deterministic - Easy to Calculate - Compressible - Avalanche type operation - Weak and strong resistance to collisions - Reversible"
      },
      {
        "answer": "Unidirectional - Deterministic - Hard to Calculate - Compressible - Avalanche type operation - Weak and strong resistance to collisions - Irreversibles"
      },
      {
        "answer": "Unidirectional - Deterministic - Easy to Calculate - Compressible - Avalanche type operation - Weak and strong resistance to collisions - Irreversibles",
        "correct": true
      },
      {
        "answer": "Bidirectional - Deterministic - Easy to Calculate - Compressible - Avalanche type operation - Weak and strong resistance to collisions - Irreversibles"
      }
    ]
  },
  {
    "code": "BLK-BEG-4",
    "question": "Is the following statement true? 'Ethereum is currently the first largest cryptocurrency in the world by its market value'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-BEG-5",
    "question": "Is the following statement true? 'Asymmetric cryptography or public key systems use three different keys: one of them can be public, the other is private, the user protects it to access the information he receives through his public key. And the last one works for both.'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-BEG-6",
    "question": "Is the following statement true? 'The concept of Cryptocurrency refers at the same time to the concept of Token, since they are the same.'",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-BEG-7",
    "question": "Who is Satoshi Nakamoto?",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It is a pseudonym used by the person or group of experts who developed the Blockchain technology."
      },
      {
        "answer": "It is a pseudonym used by the person or group of experts who developed the cryptocurrency Bitcoin and the software that supports it.",
        "correct": true
      },
      {
        "answer": "Satoshi Nakamoto is a 37-year-old man who developed blockchain technology in Japan in 2008."
      },
      {
        "answer": "It is a pseudonym used by the person who developed the Bitcoin cryptocurrency. This pseudonym was used in the first months of the birth of Bitcoin, then the identity of the person came to light."
      }
    ]
  },
  {
    "code": "BLK-BEG-8",
    "question": "Who is Satoshi Nakamoto?",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It is a pseudonym used by the person or group of experts who developed the Blockchain technology."
      },
      {
        "answer": "It is a pseudonym used by the person or group of experts who developed the cryptocurrency Bitcoin and the software that supports it.",
        "correct": true
      },
      {
        "answer": "Satoshi Nakamoto is a 37-year-old man who developed blockchain technology in Japan in 2008."
      },
      {
        "answer": "It is a pseudonym used by the person who developed the Bitcoin cryptocurrency. This pseudonym was used in the first months of the birth of Bitcoin, then the identity of the person came to light."
      }
    ]
  },
  {
    "code": "BLK-BEG-9",
    "question": "What is the Proof-of-Work (PoW) model?",
    "technology": "Blockchain",
    "level": "Beginner",
    "answers": [
      {
        "answer": "In this model, all the nodes are equal peers in the network, and all compete to seal a block before the rest and be able to obtain cryptocurrencies in exchange.",
        "correct": true
      },
      {
        "answer": "In this model, all the nodes are different peers in the network, and they all come together to seal a block before the rest and be able to obtain cryptocurrencies in exchange."
      },
      {
        "answer": "This model is the same as Proof-of-Stake (PoS) where all the nodes are equal peers in the network, and all compete to seal a block before the rest and be able to get cryptocurrencies in exchange."
      }
    ]
  },
  {
    "code": "BLK-INT-1",
    "question": "Can Smart Contracts be used in public, private and federated blockchains?",
    "technology": "Blockchain",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "Yes",
        "correct": true
      },
      {
        "answer": "No"
      }
    ]
  },
  {
    "code": "BLK-INT-2",
    "question": "Is the following statement true? 'An orphaned block (block A) is a valid block, but it is not part of a blockchain. An orphaned block is created when two miners find a valid block (block A and block B) at almost the same time and both transmit to the network.'",
    "technology": "Blockchain",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-INT-3",
    "question": "Is the following statement true? 'In a Hierarchical Deterministic Wallet there is a master public key that gives access to all the private keys of the Wallet.'",
    "technology": "Blockchain",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "BLK-INT-4",
    "question": "Is the following statement true? 'A 51% attack can be defined as the one that is directed towards a blockchain with the intention that a person or organization obtains more than half of the computation generated by the miners of this cryptocurrency.'",
    "technology": "Blockchain",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "BLK-ADV-1",
    "question": "How can you calculate the probability that a random hash is valid?'",
    "technology": "Blockchain",
    "level": "Advanced",
    "answers": [
      {
        "answer": "16^46/16^64=16^(-18)",
        "correct": true
      },
      {
        "answer": "16^64/16^16=16^(48)"
      },
      {
        "answer": "16^64/16^46=16^(18)"
      },
      {
        "answer": "16^46/16^64=16^(-16)"
      }
    ]
  },
  {
    "code": "CRYP-ADV-1",
    "question": "Is the following statement true? 'A merkle tree is a data structure divided into a layer whose purpose is to relate each node with a unique root associated with them.'",
    "technology": "Cryptography",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "CRYP-ADV-2",
    "question": "Is the following statement true? 'Symmetric key cryptography, also secret key cryptography or one-key cryptography, is a cryptographic method in which the same key is used to encrypt and decrypt messages at the sender and receiver.'",
    "technology": "Cryptography",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "ETH-BEG-1",
    "question": "Is the following statement true? 'The Ethereum Virtual Machine, or EVM, is a virtual machine that is part of the Bitcoin blockchain ecosystem.'",
    "technology": "Ethereum",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-1",
    "question": "What is a Smart Contract?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It is a computer code written in Solidity or other languages. Smart contracts live off the network. They enforce rules and perform actions, negotiated by participants in those contracts."
      },
      {
        "answer": "It is a computer code written in Solidity. Smart contracts live on the network. They enforce rules and perform actions, negotiated by participants in those contracts."
      },
      {
        "answer": "It is a computer code written in Solidity or other languages. Smart contracts live on the network. They enforce rules and perform actions, negotiated by participants in those contracts.",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-2",
    "question": "Is the following statement true? 'The very first thing that must be specified in a Solidity file is the compiler version. It is necessary because it prevents incompatibility errors which can be introduced when compiling with another version'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-BEG-3",
    "question": "Is the following statement true? 'In a Smart Contract writen in Solidity you can only import local files.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-4",
    "question": "What are Storage Variables in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Storage variables in Solidity are persistent variables that are managed by the contract that owns it as a key-value datastore (256 bit key & value). The read and write of storage variables are more costly in terms of gas used per execution.",
        "correct": true
      },
      {
        "answer": "Storage variables in Solidity are persistent variables that are managed by the contract that owns it as a string. The read and write of storage variables are free of gas cost per execution."
      },
      {
        "answer": "Storage variables in Solidity are temporary variables that are managed by the contract that owns it as a key-value datastore (256 bit key & value). The read and write of storage variables are more costly in terms of gas used per execution."
      },
      {
        "answer": "Storage variables in Solidity are temporary variables that are managed by the contract that owns it as a string. The read and write of storage variables have the same cost as memory variable read and write."
      }
    ]
  },
  {
    "code": "SOL-BEG-5",
    "question": "Is the following statement true? 'Since the Spurious Dragon hard-fork you can deploy contracts bigger than 24576 bytes.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-6",
    "question": "What is a smart contract's ABI?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It is a XML-based document that describes the functions, events, types, and other ABIs of that contract."
      },
      {
        "answer": "It is a JSON-based document that describes the contract name and size."
      },
      {
        "answer": "It is a JSON-based document that describes the functions, events, types, and other ABIs of that contract.",
        "correct": true
      },
      {
        "answer": "EVM bytecode is a low-level programming language that is compiled from a high-level programming language, in this case Solidity."
      }
    ]
  },
  {
    "code": "SOL-BEG-7",
    "question": "What is an enum in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Its a constant type that stores a list of named values such as short, long, or float. Usually used to define unknown constant values that are used across the contract(s) and facilitate the developing and reading of code."
      },
      {
        "answer": "Its a constant type that stores a list of named values such as short, long, or float. Usually used to define known constant values that are used across the contract(s) and facilitate the developing and reading of code.",
        "correct": true
      },
      {
        "answer": "Its a variable type that stores a list of named values such as short, long, or float. Usually used to define known constant values that are used across the contract(s) and facilitate the developing and reading of code."
      },
      {
        "answer": "Its a constant type that stores a list of named values such as array or boolean. Usually used to define known constant values that are used only one time and locally. Makes it harder to read the code."
      }
    ]
  },
  {
    "code": "SOL-BEG-8",
    "question": "What is a Library in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It's a type of contract that can not be called by other contracts."
      },
      {
        "answer": "A library is a piece of code that can't be re-used."
      },
      {
        "answer": "A library is a piece of code that other smart contracts can re-use.",
        "correct": true
      },
      {
        "answer": "It's a type of contract that stores data."
      }
    ]
  },
  {
    "code": "SOL-BEG-9",
    "question": "Is the following statement true? 'Since the Spurious Dragon hard-fork you can't deploy contracts bigger than 24576 bytes.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-BEG-10",
    "question": "Is the following statement true? 'Foreach is an example of loop that can be used in Solidity.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-11",
    "question": "Among the kinds of loop can be used in Solidity, there are:'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "ForEach, While and For"
      },
      {
        "answer": "While, Do...While and For",
        "correct": true
      },
      {
        "answer": "Map, Do...While and For"
      },
      {
        "answer": "While, While...for and For"
      }
    ]
  },
  {
    "code": "SOL-BEG-12",
    "question": "Is the following statement true? 'For is an example of loop that can be used in Solidity.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-BEG-13",
    "question": "Is the following statement true? 'In a Smart Contract writen in Solidity you can import local files and HTTP files (even from Github) like [import \"http://github.com/<owner>/<repo>/<path to the file>\"].'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-BEG-14",
    "question": "Is the following statement true? 'The very first thing that must be specified in a Solidity file is the contract name.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-15",
    "question": "What extension does the source file have in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": ".txt"
      },
      {
        "answer": ".js"
      },
      {
        "answer": ".ts"
      },
      {
        "answer": ".sol",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-16",
    "question": "What is a constructor in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "It is a function that is executed every time the contract is called."
      },
      {
        "answer": "It's a type of contract that can not be called by other contracts."
      },
      {
        "answer": "It is a function that is executed once when a contract is called for the first time."
      },
      {
        "answer": "It is a function that is executed once when a contract is created.",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-17",
    "question": "Can the constructor be called after the creation of a smart contract?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Yes"
      },
      {
        "answer": "No",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-18",
    "question": "Is the following statement true? 'State variables are values that are permanently stored in contract storage.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-BEG-19",
    "question": "Is the following statement true? 'State variables are values that are temporarily stored in contract storage.'",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-20",
    "question": "What is one difference between types int and uint in Solidity?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "None. They are the same."
      },
      {
        "answer": "Uint type can store an array of int type values."
      },
      {
        "answer": "Int type can store an array of uint type values."
      },
      {
        "answer": "Uint type can store only positive values while int types allows negative and positive values.",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-BEG-21",
    "question": "What is Structs?",
    "technology": "Solidity",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Structures are custom data types. They can be used in mappings or arrays, but can contain only simple data types like uint and strings."
      },
      {
        "answer": "Structures are custom data types. They can be used in mappings or arrays, and they themselves may contain arrays and mapping.",
        "correct": true
      },
      {
        "answer": "Structures are standard data types that can only contain simple data types like uint and strings."
      },
      {
        "answer": "Structures are custom data types that can not be used in mappings or arrays."
      }
    ]
  },
  {
    "code": "SOL-INT-1",
    "question": "Is the following statement true? 'The read and write of storage variables are more costly in terms of gas used per execution.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-2",
    "question": "What exactly is the EVM bytecode generated by solidity compiler?",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "EVM bytecode is a low-level programming language that is compiled from a high-level programming language, in this case Solidity",
        "correct": true
      },
      {
        "answer": "EVM bytecode is a high-level programming language that is compiled from a low-level programming language, in this case Solidity"
      },
      {
        "answer": "It is a JSON-based document that describes the functions, events and types of that contract."
      },
      {
        "answer": "It is a JSON-based document that is compiled from a low-level programming language, in this case Solidity."
      }
    ]
  },
  {
    "code": "SOL-INT-3",
    "question": "Is the following statement true? 'The read and write of storage variables are less costly in terms of gas used per execution.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-4",
    "question": "Is the following statement true? 'There are two types of Library: Deployed and Embedded.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-5",
    "question": "Is the following statement true? 'There are only one type of Library: Embedded.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-6",
    "question": "What is the mapping type?",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "Mappings can be seen as hash tables, which are virtually initialized so that every possible key exists and is mapped to a value whose byte-representation is all zeros — a type’s default value.",
        "correct": true
      },
      {
        "answer": "Mappings can be seen as hash tables, which are virtually initialized so that every possible key exists and is mapped to a value whose byte-representation is all ones — a type’s default value."
      },
      {
        "answer": "Mappings can be seen as fixed lenght arrays where only the pre-defined values are accessible."
      },
      {
        "answer": "Its a constant type that stores a list of named values such as short, long, or float. Usually used to define known constant values that are used across the contract(s) and facilitate the developing and reading of code."
      }
    ]
  },
  {
    "code": "SOL-INT-7",
    "question": "Is the following statement true? 'Mappings can not be multi-level wich means that a mapping can not have another mapping as one of his members.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-8",
    "question": "Is the following statement true? 'Mappings can be multi-level wich means that a mapping can have another mapping as any of his members.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-9",
    "question": "Is the following statement true? 'Mappings can be multi-level wich means that a mapping can have another mapping as long it is not the first/left member.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-10",
    "question": "Can an enum type be declared inside of an interface?",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "Yes"
      },
      {
        "answer": "No",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-11",
    "question": "Is the following statement true? 'Struct data types can not be used inside mappings.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-12",
    "question": "Is the following statement true? 'Struct data types can be used inside mappings and they themselves may contain arrays and mappings.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-13",
    "question": "Is it possible for a struct to contain a member of its own type?",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "Yes"
      },
      {
        "answer": "No",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-14",
    "question": "Is the following statement true? 'Variables declared without specified data type with the 'var' keyword must have an initialization value.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-15",
    "question": "Is the following statement true? 'Memory arrays have fixed lenght that are defined upon its creation. Storage arrays on the other hand can grow and receive new items.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-INT-16",
    "question": "Is the following statement true? 'Storage arrays have fixed lenght that are defined upon its creation. Memory arrays on the other hand can grow and receive new items.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-INT-17",
    "question": "Is the following statement true? 'In memory array variables, to add a new element you just have to call [array].push(element).'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-ADV-1",
    "question": "Is the following statement true? 'It is recommended to use the bytes32 type instead of the string type when the length of the string is known because it is much cheaper to work and store.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-ADV-2",
    "question": "Is the following statement true? 'It is recommended to use the bytes32 type instead of the string type only when the length of the string is not known, otherwise it is much expensive,'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-ADV-3",
    "question": "What happens if I pass a non-existent account address to the self-destruct function?",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "The transaction will revert."
      },
      {
        "answer": "First, the account will be created, and then, Ether will be transferred to it. However, such an operation will cost more.",
        "correct": true
      },
      {
        "answer": "The ether will be transferred to the contract owner wallet."
      },
      {
        "answer": "The ether will be burned."
      }
    ]
  },
  {
    "code": "SOL-ADV-4",
    "question": "What does the function keccak256 do?",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "Returns a number representation of the content"
      },
      {
        "answer": "keccak256(...) returns (bytes32): compute the Ethereum-SHA-3 (Keccak-256) hash of the unpacked arguments."
      },
      {
        "answer": "keccak256(...) returns (bytes8): compute the Ethereum-SHA-3 (Keccak-256) hash of the (tightly packed) arguments."
      },
      {
        "answer": "keccak256(...) returns (bytes32): compute the Ethereum-SHA-3 (Keccak-256) hash of the (tightly packed) arguments.",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-ADV-5",
    "question": "Is the following statement true? 'The Keccak-256 function tightly packs the arguments before computing the Ethereum-SHA-3 hash.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "SOL-ADV-6",
    "question": "Is the following statement true? 'The Keccak-256 function tightly packs the arguments before computing the Ethereum-SHA-6 hash.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "SOL-ADV-7",
    "question": "How much does the self-destruct function cost in gas?",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "2100 gas units"
      },
      {
        "answer": "5000 gas untis",
        "correct": true
      },
      {
        "answer": "8500 gas units"
      },
      {
        "answer": "It's costless."
      }
    ]
  },
  {
    "code": "SOL-ADV-8",
    "question": "Does the self-destruct functions costs more or lesse than a simple ether transfer?",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "More",
        "correct": true
      },
      {
        "answer": "Less"
      },
      {
        "answer": "The same"
      }
    ]
  },
  {
    "code": "SOL-ADV-9",
    "question": "What is the difference between msg.sender and tx.origin?",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "They return the same value wich is the sender of the current call."
      },
      {
        "answer": "tx.sender returns the sender of the transaction and msg.origin returns the sender of the current call."
      },
      {
        "answer": "tx.origin returns the sender of the transaction and msg.sender returns the sender of the current call.",
        "correct": true
      },
      {
        "answer": "tx.sender returns the sender of the transaction and msg.origin returns the sender of the current call."
      }
    ]
  },
  {
    "code": "HAR-BEG-1",
    "question": "What is hardhat?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "Its a development language used to create smart contracts."
      },
      {
        "answer": "Its a famous wallet to interact with smart contracts."
      },
      {
        "answer": "Hardhat is a Solidity development environment.",
        "correct": true
      },
      {
        "answer": "Its a development language used to create dApps."
      }
    ]
  },
  {
    "code": "HAR-BEG-2",
    "question": "Is the following statement true? 'Hardhat is a Solidity development environment built using Node.js'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-BEG-3",
    "question": "Is the following statement true? 'Hardhat is a Solidity development environment built using Java'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-BEG-4",
    "question": "Is the following statement true? 'Hardhat has a built in network for dApp testing'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-BEG-5",
    "question": "What is the JS tool used for testing creation in Hardhat?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "ChaiJS",
        "correct": true
      },
      {
        "answer": "Yarn"
      },
      {
        "answer": "NPM"
      },
      {
        "answer": "EthersJS"
      }
    ]
  },
  {
    "code": "HAR-BEG-6",
    "question": "What is the Hardhat command to compile the Smart Contracts?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "hardhat run"
      },
      {
        "answer": "hardhat build"
      },
      {
        "answer": "hardhat compile",
        "correct": true
      },
      {
        "answer": "hardhat test"
      }
    ]
  },
  {
    "code": "HAR-BEG-7",
    "question": "What is the Hardhat command to compile the Smart Contracts?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "hardhat run"
      },
      {
        "answer": "hardhat build"
      },
      {
        "answer": "hardhat compile",
        "correct": true
      },
      {
        "answer": "hardhat test"
      }
    ]
  },
  {
    "code": "HAR-BEG-8",
    "question": "Is the following statement true? 'Hardhat does not possess any built-in, nor plugin, to manage deployed versions of smart contracts'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-BEG-9",
    "question": "What's the name of the plugin that can be used to manage deploy versions in hardhat?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "@nomicfoundation/hardhat-toolbox"
      },
      {
        "answer": "hardhat-deploy",
        "correct": true
      },
      {
        "answer": "solidity-coverage"
      },
      {
        "answer": "hardhat-gas-reporter"
      }
    ]
  },
  {
    "code": "HAR-BEG-10",
    "question": "Is the following statement true? 'Hardhat has a strong community that develops plugins to be used with hardhat and make all developers life easier'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-BEG-11",
    "question": "Is the following statement true? 'Hardhat can only be used with javascript'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-BEG-12",
    "question": "Is the following statement true? 'Hardhat can only be used with javascript'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-BEG-13",
    "question": "Is the following statement true? 'Hardhat can be used with javascript or typescript'?",
    "technology": "Hardhat",
    "level": "Beginner",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-INT-1",
    "question": "Is the following statement true? 'Hardhat has no built-in tool for unit testing.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-INT-2",
    "question": "What tools are used by Hardhat for testing?'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "ethersJS, MochaJS and ChaiJS",
        "correct": true
      },
      {
        "answer": "web3JS, MochaJS and ChaiJS"
      },
      {
        "answer": "typescript, MochaJS and ethersJS"
      },
      {
        "answer": "web3JS, MochaJS and ethersJS"
      }
    ]
  },
  {
    "code": "HAR-INT-3",
    "question": "Is the following statement true? 'The 'beforeEach' section of testing script can only be used once in the beginning of it.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-INT-4",
    "question": "Is the following statement true? 'The 'beforeEach' section of testing script can only be used once in a describe section.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-INT-5",
    "question": "What is the purpose of the 'beforeEach' section of hardhat testing script?",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "There is no 'beforeEach' section in hardhat testing."
      },
      {
        "answer": "Group testing scenarios with the same context."
      },
      {
        "answer": "Define values and execute commands necessary for the execution of the testing scenarios."
      },
      {
        "answer": "Define values and execute commands necessary for the execution of the testing scenarios inside the same 'describe' section.",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-INT-6",
    "question": "Is the following statement true? 'There can be only one 'describe' section at the beginning of the script.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-INT-7",
    "question": "Is the following statement true? 'There can be nested 'describe' sections.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-INT-8",
    "question": "What is the command to run hardhat testing?'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "hardhat testing"
      },
      {
        "answer": "hardhat run test"
      },
      {
        "answer": "hardhat test",
        "correct": true
      },
      {
        "answer": "hardhat proof"
      }
    ]
  },
  {
    "code": "HAR-INT-9",
    "question": "Is the following statement true? 'The '--grep' tag available in hardhat test command allows the execution of specific section with the exact label informed.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-INT-10",
    "question": "Is the following statement true? 'The '--grep' tag available in hardhat test command allows the execution of specific section containing the informed text in its label.'",
    "technology": "Solidity",
    "level": "Intermediate",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-ADV-01",
    "question": "Wich community hardhat plugin allows to check the coverage of the unit testing created?'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "solidity-coverage",
        "correct": true
      },
      {
        "answer": "hardhat-watcher"
      },
      {
        "answer": "hardhat-gas-reporter"
      },
      {
        "answer": "coverage"
      }
    ]
  },
  {
    "code": "HAR-ADV-02",
    "question": "Is the following statement true? 'The @typechain/hardhat community plugin manages the creation of contract related typings to easily work with TypeScript.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  },
  {
    "code": "HAR-ADV-03",
    "question": "Is the following statement true? 'The @typechain/hardhat community plugin manages the gas cost of each transaction executed in a testing or script.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True"
      },
      {
        "answer": "False",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-ADV-04",
    "question": "For What the following code is used in hardhat? 'const r = await tx.wait(1)'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "Retrieve the wallet address that executed the transaction."
      },
      {
        "answer": "Retrieve the executed transaction receipt.",
        "correct": true
      },
      {
        "answer": "Execute a transaction"
      },
      {
        "answer": "Nothing. It will throw an error."
      }
    ]
  },
  {
    "code": "HAR-ADV-05",
    "question": "What will be the value of the 'r' constant in the following code? 'const r = tx.wait(1)'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "Nothing. It will throw an error."
      },
      {
        "answer": "It will be the executed transaction receipt."
      },
      {
        "answer": "It will be a contract object containning the contract abi of the transaction."
      },
      {
        "answer": "It will be a Promise of a receipt since the tx.wait function is asynchronous",
        "correct": true
      }
    ]
  },
  {
    "code": "HAR-ADV-06",
    "question": "Is the following statement true? 'The correct and secure way to deploy a Contract with Proxy pattern in hardhat is using the HardhatUpgrades plugin.'",
    "technology": "Solidity",
    "level": "Advanced",
    "answers": [
      {
        "answer": "True",
        "correct": true
      },
      {
        "answer": "False"
      }
    ]
  }
]
